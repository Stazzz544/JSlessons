"use strict";

const arr = [1, 2, 3, 6, 8]; //подопытный массив


//метод pop - удаляет последний элемент из массива

const arr = [1, 2, 3, 6, 8];

arr.pop();
console.log(arr);//[ 1, 2, 3, 6 ] - последний элемент был удалён
//или
console.log(arr.pop()); // 8 - показывает удалённый элемент (последний)


//метод push - добавляет элемент в конец массива

const arr = [1, 2, 3, 6, 8];
arr.push(12);
console.log(arr);//[ 1, 2, 3, 6, 8, 12 ]

//shift и unshift (РЕДКО ИСПОЛЬЗУЮТ) - добавляют или удаляют элементы в(из) начало(а) и конец массива по аналогии с push и pop

//перебока массива
const arr = [1, 2, 3, 6, 8];
for (let i = 0; i < arr.length; i++) { //цикл будет отрабатывать, пока не закончатся элементы внутри массива
	console.log(arr[i]);
}
//1
//2
//3
//6
//8


//перебока массива методом for of
// for of работает только с массивоподобными сущностями - массивами, строки, псевдомассивы, map и set. С объектами напрямую не работает
const arr = [1, 2, 3, 6, 8];
for (let value of arr) { // value -обсолютно любое название, arr - массив, который будем перебирать
	console.log(value);
}
//1
//2
//3
//6
//8


// length

const arr = [2, 3, 6, 8, 10]; 
console.log(arr.length);// 5 - length состоит из последнего индекса в массиве +1

//глюки у length
const arr = [2, 3, 6, 8, 10]; 
arr[99] = 0; 
console.log(arr.length); //100 - это раскрывает, что length состоит из последнего индекса +1
console.log(arr);//[ 2, 3, 6, 8, 10, <94 empty items>, 0 ] - 94 пустых ячейки


//метод forEach - позволяет гибко перебрать элементы внутри массива
//проходит по каждому элемента массива и применяет коллбэк функцию на каждом элементе

const arr = [2, 3, 6, 8, 10]; 

arr.forEach(function(item, i, arr) {
		console.log(`${i}: ${item} внутри массива ${arr}`);
});
//forEach проходит по каждому элементу массива и применяет function каждый раз для каждого элемента массива
//function принимает 3 аргумента (это колбэк функция)
//item(любое название) - тот элемент, который мы сейчас перебераем 2, 3, 6...
//i(любое название) - в эту переменную сохраняется номер по порядку 0, 1, 2...
//arr ссылка на массив, который мы перебераем
//Вывод кода выше:
//0: 2 внутри массива 2,3,6,8,10
//1: 3 внутри массива 2,3,6,8,10
//2: 6 внутри массива 2,3,6,8,10
//3: 8 внутри массива 2,3,6,8,10
//4: 10 внутри массива 2,3,6,8,10

//Разница for of и forEach
//Цикл for of можно остановить break или continue, а forEach нельзя


//split формирует массив на основании строк
const str = prompt("", "");
const products = str.split(", ")
console.log(products);
//итог, сфоромировался массив на основании строк:
//Array(3)
//0: "апельсин"
//1: "арбуз"
//2: "морковь"


//join на основании массива можно сформировать строку
//склеивает массив в строку, в данном случае через точку с запятой
const arr = ['арбуз', 5, 'пакет', 'домофон', 7];
console.log(arr.join('; '));//арбуз; 5; пакет; домофон; 7 - и это всё строка



//sort - сортировка -сортирует элементы внутри массива как СТРОКИ!
const arr = ['арбуз', 5, 'пакет', 'домофон', 7];
arr.sort();
console.log(arr.join('; '));//5; 7; арбуз; домофон; пакет  5 И 7 СЕЙЧАС СТРОКА!

const arr = [2, 23, 6, 8, 10]; 
arr.sort();
console.log(arr);//[ 10, 2, 23, 6, 8 ] - тут сравнение идёт посимвольно!


//sort может принимать во внутрь callback функцию как и forEach
//частовстречающийся шаблон:
function compareNum(a, b) {
	return a - b;
}

const arr = [2, 23, 6, 8, 10]; 
arr.sort(compareNum);
console.log(arr);//[ 2, 6, 8, 10, 23 ]


//ПСЕВДОМАССИВЫ
//элементы сос траницы попадают в псевдомассив
//у псевдомассивов нет ВООБЩЕ никаких методов, это просто структура, которая хранит данные по порядку.