
/*
==============defer============
defer сообщает браузеру, что он должен продолжать загружать страницу и обрабатывать defer в фоновом режиме

Так же будет соблюдён порядок загрузки, сначала зрагрузится первый скрпт с defer, затем второй

СКРИПТЫ С defer НИКОГДА НЕ БЛОКИРУЮТ СТРАНИЦУ, ТЕГ МОЖНО(НО НЕ НУЖНО) ПИХАТЬ ДАЖЕ В ВЕРХ HTML ФАЙЛА

СКРИПТЫ С defer БУДЕТ ВЫПОЛНИН ТОЛЬКО ТОГДА, КОГДА DOM ДЕРЕВО БУДЕТ ГОТОВО

<script defer src="js/script.js"></script> (много скрипта) - загрузится первым
<script defer src="js/test.js"></script>   (мало скрипта)  - загрузится вторым


==============async============
Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается
Асинхронные скрипты не ждут друг друга

<script defer src="js/script.js"></script> (много скрипта) - загрузится вторым
<script defer src="js/test.js"></script>   (мало скрипта)  - загрузится первым

Мы не всегда будем понимать какой скрипт будет загружен первым

полезно для скриптов не связанных с деревом, например метрики и счетчики
*/

//создаём тег скрипт и помещаем его на страницу


const script = document.createElement('script');
//устанавливаем путь к скрипту
script.src = "js/test.js";
//помещаем на страницу
document.body.append(script);//append помещает документ в конец(в данном случае body)
//ВАЖНО! Динамически загружаемые скрипты ведут себя как async, ждать они никого не будут.


//Если нужно изменить порядок загрузки динамических скриптов то:
const script = document.createElement('script');
script.src = "js/test.js";
script.async = false; // отключаем асинхронную загрузку
document.body.append(script);



//ТЕПЕРЬ ЗАГРУЗКА ДВУХ СКРИПТОВ БУДЕТ СТРОГО ДРУГ ЗА ДРУГОМ:
function loadScript(src) {
	const script = document.createElement('script');
	script.src = src;
	script.async = false; // отключаем асинхронную загрузку
	document.body.append(script);
}

loadScript ("js/test.js");
loadScript ("js/some.js");