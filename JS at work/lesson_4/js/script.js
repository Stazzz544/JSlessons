'use strict';

const now = new Date();
console.log(now);//2021-05-16T09:12:57.494Z  T-разделитель


// в Date можно передавать аргументы, например дату ввиде строки
const now1 = new Date('2020-05-01');
console.log(now1);//2020-05-01T00:00:00.000Z,  нули - т.к. мы не указали эти значения, когда передавпали в Date данные


//можем настроить дату передавая опре
const now2 = new Date(2020, 5, 1, 20);
console.log(now2);//2020-06-01T17:00:00.000Z,  
//1-если месяц 05, то пишем без 0!
//2-месяцы считаются с нуля, поэтому в консоле не 05 месяц, а 06
//17 часов вместо 20 мы получили потому, что часовой пояс у меня +3, по гринвичу у меня будет 17

//любая дата в js хранится в милисекундах, отчет идёт с 1970 года

const now3 = new Date(0);
console.log(now3);//1970-01-01T00:00:00.000Z


//чтобы получить дату до 1970-01-01T00:00:00.000Z - используем отрицательные значения

const now4 = new Date(-9999999999999);
console.log(now4);//1653-02-10T06:13:20.001Z



//МЕТОДЫ GET-еры, для получения каких-либо компонентов
const now6 = new Date();
console.log(now6);//2021-05-16T10:04:18.499Z VS CODE показывает при этом методе время по UTC, в браузере же будет местное ремя с учётом часового пояса пользователя
console.log(now6.getFullYear());//2021 - год
console.log(now6.getMonth());//4 - месяц
console.log(now6.getDate());//16 - число
console.log(now6.getHours());//13 - часы
//есть и другие методы для получения минут, секунд и милисекунд


console.log(now6.getDay());// 0 - воскресенье. Номерация с воскресенья и с нуля. Суббота - 6й день
//ВСЁ ВОЗВРАЩАЕТСЯ В СООТВЕТСТВИИ С МЕСТНЫМ ЧАСОВЫМ ПОЯСОМ

console.log(now6.getHours());// местное время 13
console.log(now6.getUTCHours());//время пео utc 10
//Всемирное координированное время UTC

//получить разницу между часовым поясом и UTC(в минутах)
console.log(now6.getTimezoneOffset());//-180 - разница в минутах

//timestamp - количество милисекунд прошедшее с 1970-01-01T00:00:00.000Z
console.log(now6.getTime());//1621160275093
//можно 1621160275093 превратить обратно в дату :
const now7 = new Date(1621160275093);
console.log(now7);//2021-05-16T10:17:55.093 - это как раз 1970-01-01 + 1621160275093 милисекунд


//МЕТОДЫ SET-теры, для установки даты
const now8 = new Date();


console.log(now8.setHours(18));//1621178906720
console.log(now8);//2021-05-16T15:28:26.720Z в vscode и Sun May 16 2021 18:29:51 GMT+0300 (Москва, стандартное время) в браузере

console.log(now8.setFullYear(1787));//-5763167967451
console.log(now8);//Wed May 16 1787 18:30:54 GMT+0230 (Москва, стандартное время)(браузер)
//Со всем остальным работает по аналогии:
// console.log(now8.setMonth());
// console.log(now8);
// console.log(now8.setDate());
// console.log(now8);

//Лайфхак! модно в часах поменять и минуты добавив после часов минуты, но так лучше не делать
console.log(now8.setHours(18, 45));//-5763167101687
console.log(now8);//Wed May 16 1787 18:45:40 GMT+0230 (Москва, стандартное время)

//если установить количество часов больше чем 24, например 40 - то мы просто получим следующий день


//МЕТОД PARSE
const now9 = new Date('2020-05-01');
		new Date.parse('2020-05-01');//этот метод равносилен записи выше, и вернёт тоже самое


//использование дат для измерения промежутка времени
//сначала мы создаём цикл для того чтобы загрузить систему. и в этот же момент замеряем текущую дате
//после этого мы узнаём дату сразу после окончания цикла. Далее от даты окончания отнимаем дату начала и получаем время за которое программа отработала
let start = new Date();//текущая дата
for (let i = 0; i < 100000; i++) {
	let some = i ** 3; //i возводится в степень 3 ** 
}
let end = new Date();//дата после того как скрипт отработал

console.log(`цикл отработал за ${end - start} милисекунд`);//цикл отработал за 18 милисекунд